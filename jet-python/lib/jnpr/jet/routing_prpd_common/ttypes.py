#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import jnpr.jet.jnxBase_jnx_addr.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RoutingReturnCode:
  RET_SUCCESS = 0
  RET_FAILURE = 1
  RET_NOT_FOUND = 2
  RET_INVALID_PARAMS = 3

  _VALUES_TO_NAMES = {
    0: "RET_SUCCESS",
    1: "RET_FAILURE",
    2: "RET_NOT_FOUND",
    3: "RET_INVALID_PARAMS",
  }

  _NAMES_TO_VALUES = {
    "RET_SUCCESS": 0,
    "RET_FAILURE": 1,
    "RET_NOT_FOUND": 2,
    "RET_INVALID_PARAMS": 3,
  }

class RoutingRouteTableFormat:
  TABLE_STRING = 0
  TABLE_ID = 1

  _VALUES_TO_NAMES = {
    0: "TABLE_STRING",
    1: "TABLE_ID",
  }

  _NAMES_TO_VALUES = {
    "TABLE_STRING": 0,
    "TABLE_ID": 1,
  }

class RoutingRouteAfType:
  RT_AF_UNSPEC = 0
  RT_AF_INET = 1
  RT_AF_INET6 = 2
  RT_AF_INETVPN = 3
  RT_AF_INET6VPN = 4

  _VALUES_TO_NAMES = {
    0: "RT_AF_UNSPEC",
    1: "RT_AF_INET",
    2: "RT_AF_INET6",
    3: "RT_AF_INETVPN",
    4: "RT_AF_INET6VPN",
  }

  _NAMES_TO_VALUES = {
    "RT_AF_UNSPEC": 0,
    "RT_AF_INET": 1,
    "RT_AF_INET6": 2,
    "RT_AF_INETVPN": 3,
    "RT_AF_INET6VPN": 4,
  }


class RoutingRouteTableName:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRouteTableName')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRouteTableId:
  """
  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRouteTableId')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RouteTableRtTableFormat:
  """
  Attributes:
   - rtt_id
   - rtt_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'rtt_id', (RoutingRouteTableId, RoutingRouteTableId.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'rtt_name', (RoutingRouteTableName, RoutingRouteTableName.thrift_spec), None, ), # 2
  )

  def __init__(self, rtt_id=None, rtt_name=None,):
    self.rtt_id = rtt_id
    self.rtt_name = rtt_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.rtt_id = RoutingRouteTableId()
          self.rtt_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rtt_name = RoutingRouteTableName()
          self.rtt_name.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RouteTableRtTableFormat')
    if self.rtt_id is not None:
      oprot.writeFieldBegin('rtt_id', TType.STRUCT, 1)
      self.rtt_id.write(oprot)
      oprot.writeFieldEnd()
    if self.rtt_name is not None:
      oprot.writeFieldBegin('rtt_name', TType.STRUCT, 2)
      self.rtt_name.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRouteTable:
  """
  Attributes:
   - RtTableFormat
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'RtTableFormat', (RouteTableRtTableFormat, RouteTableRtTableFormat.thrift_spec), None, ), # 1
  )

  def __init__(self, RtTableFormat=None,):
    self.RtTableFormat = RtTableFormat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.RtTableFormat = RouteTableRtTableFormat()
          self.RtTableFormat.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRouteTable')
    if self.RtTableFormat is not None:
      oprot.writeFieldBegin('RtTableFormat', TType.STRUCT, 1)
      self.RtTableFormat.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRdType0:
  """
  Attributes:
   - as_number
   - assigned_number
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'as_number', None, None, ), # 1
    (2, TType.STRING, 'assigned_number', None, None, ), # 2
  )

  def __init__(self, as_number=None, assigned_number=None,):
    self.as_number = as_number
    self.assigned_number = assigned_number

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.as_number = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.assigned_number = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRdType0')
    if self.as_number is not None:
      oprot.writeFieldBegin('as_number', TType.STRING, 1)
      oprot.writeString(self.as_number)
      oprot.writeFieldEnd()
    if self.assigned_number is not None:
      oprot.writeFieldBegin('assigned_number', TType.STRING, 2)
      oprot.writeString(self.assigned_number)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRdType1:
  """
  Attributes:
   - ip_address
   - assigned_number
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ip_address', (jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress, jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress.thrift_spec), None, ), # 1
    (2, TType.STRING, 'assigned_number', None, None, ), # 2
  )

  def __init__(self, ip_address=None, assigned_number=None,):
    self.ip_address = ip_address
    self.assigned_number = assigned_number

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ip_address = jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress()
          self.ip_address.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.assigned_number = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRdType1')
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRUCT, 1)
      self.ip_address.write(oprot)
      oprot.writeFieldEnd()
    if self.assigned_number is not None:
      oprot.writeFieldBegin('assigned_number', TType.STRING, 2)
      oprot.writeString(self.assigned_number)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRdType2:
  """
  Attributes:
   - as_number
   - assigned_number
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'as_number', None, None, ), # 1
    (2, TType.STRING, 'assigned_number', None, None, ), # 2
  )

  def __init__(self, as_number=None, assigned_number=None,):
    self.as_number = as_number
    self.assigned_number = assigned_number

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.as_number = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.assigned_number = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRdType2')
    if self.as_number is not None:
      oprot.writeFieldBegin('as_number', TType.STRING, 1)
      oprot.writeString(self.as_number)
      oprot.writeFieldEnd()
    if self.assigned_number is not None:
      oprot.writeFieldBegin('assigned_number', TType.STRING, 2)
      oprot.writeString(self.assigned_number)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RouteDistinguisherRdFormat:
  """
  Attributes:
   - rd0
   - rd1
   - rd2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'rd0', (RoutingRdType0, RoutingRdType0.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'rd1', (RoutingRdType1, RoutingRdType1.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'rd2', (RoutingRdType2, RoutingRdType2.thrift_spec), None, ), # 3
  )

  def __init__(self, rd0=None, rd1=None, rd2=None,):
    self.rd0 = rd0
    self.rd1 = rd1
    self.rd2 = rd2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.rd0 = RoutingRdType0()
          self.rd0.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rd1 = RoutingRdType1()
          self.rd1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rd2 = RoutingRdType2()
          self.rd2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RouteDistinguisherRdFormat')
    if self.rd0 is not None:
      oprot.writeFieldBegin('rd0', TType.STRUCT, 1)
      self.rd0.write(oprot)
      oprot.writeFieldEnd()
    if self.rd1 is not None:
      oprot.writeFieldBegin('rd1', TType.STRUCT, 2)
      self.rd1.write(oprot)
      oprot.writeFieldEnd()
    if self.rd2 is not None:
      oprot.writeFieldBegin('rd2', TType.STRUCT, 3)
      self.rd2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRouteDistinguisher:
  """
  Attributes:
   - RdFormat
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'RdFormat', (RouteDistinguisherRdFormat, RouteDistinguisherRdFormat.thrift_spec), None, ), # 1
  )

  def __init__(self, RdFormat=None,):
    self.RdFormat = RdFormat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.RdFormat = RouteDistinguisherRdFormat()
          self.RdFormat.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRouteDistinguisher')
    if self.RdFormat is not None:
      oprot.writeFieldBegin('RdFormat', TType.STRUCT, 1)
      self.RdFormat.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingL3vpnAddress:
  """
  Attributes:
   - rd
   - vpn_addr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'rd', (RoutingRouteDistinguisher, RoutingRouteDistinguisher.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'vpn_addr', (jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress, jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress.thrift_spec), None, ), # 2
  )

  def __init__(self, rd=None, vpn_addr=None,):
    self.rd = rd
    self.vpn_addr = vpn_addr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.rd = RoutingRouteDistinguisher()
          self.rd.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.vpn_addr = jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress()
          self.vpn_addr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingL3vpnAddress')
    if self.rd is not None:
      oprot.writeFieldBegin('rd', TType.STRUCT, 1)
      self.rd.write(oprot)
      oprot.writeFieldEnd()
    if self.vpn_addr is not None:
      oprot.writeFieldBegin('vpn_addr', TType.STRUCT, 2)
      self.vpn_addr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutePrefixRoutePrefixAf:
  """
  Attributes:
   - inet
   - inet6
   - inetvpn
   - inet6vpn
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'inet', (jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress, jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'inet6', (jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress, jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'inetvpn', (RoutingL3vpnAddress, RoutingL3vpnAddress.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'inet6vpn', (RoutingL3vpnAddress, RoutingL3vpnAddress.thrift_spec), None, ), # 4
  )

  def __init__(self, inet=None, inet6=None, inetvpn=None, inet6vpn=None,):
    self.inet = inet
    self.inet6 = inet6
    self.inetvpn = inetvpn
    self.inet6vpn = inet6vpn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.inet = jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress()
          self.inet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.inet6 = jnpr.jet.jnxBase_jnx_addr.ttypes.JnxBaseIpAddress()
          self.inet6.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.inetvpn = RoutingL3vpnAddress()
          self.inetvpn.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.inet6vpn = RoutingL3vpnAddress()
          self.inet6vpn.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutePrefixRoutePrefixAf')
    if self.inet is not None:
      oprot.writeFieldBegin('inet', TType.STRUCT, 1)
      self.inet.write(oprot)
      oprot.writeFieldEnd()
    if self.inet6 is not None:
      oprot.writeFieldBegin('inet6', TType.STRUCT, 2)
      self.inet6.write(oprot)
      oprot.writeFieldEnd()
    if self.inetvpn is not None:
      oprot.writeFieldBegin('inetvpn', TType.STRUCT, 3)
      self.inetvpn.write(oprot)
      oprot.writeFieldEnd()
    if self.inet6vpn is not None:
      oprot.writeFieldBegin('inet6vpn', TType.STRUCT, 4)
      self.inet6vpn.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoutingRoutePrefix:
  """
  Attributes:
   - RoutePrefixAf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'RoutePrefixAf', (RoutePrefixRoutePrefixAf, RoutePrefixRoutePrefixAf.thrift_spec), None, ), # 1
  )

  def __init__(self, RoutePrefixAf=None,):
    self.RoutePrefixAf = RoutePrefixAf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.RoutePrefixAf = RoutePrefixRoutePrefixAf()
          self.RoutePrefixAf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoutingRoutePrefix')
    if self.RoutePrefixAf is not None:
      oprot.writeFieldBegin('RoutePrefixAf', TType.STRUCT, 1)
      self.RoutePrefixAf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
