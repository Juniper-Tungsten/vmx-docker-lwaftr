#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InetFamilyType:
  """
  Enum for indicating the family types supported. Based on this value,
  corresponding family will be used in APIs. As of now inet and inet6 families
  are supported.
  """
  INTF_AF_INET = 2

  _VALUES_TO_NAMES = {
    2: "INTF_AF_INET",
  }

  _NAMES_TO_VALUES = {
    "INTF_AF_INET": 2,
  }


class InterfaceRetStatus:
  """
  Return status for Interface API calls.
  Return code consists of error code and corresponding error string.

  Attributes:
   - err_code: Error code
   - err_str: Error string
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'err_str', None, None, ), # 2
  )

  def __init__(self, err_code=None, err_str=None,):
    self.err_code = err_code
    self.err_str = err_str

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.err_str = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InterfaceRetStatus')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.err_str is not None:
      oprot.writeFieldBegin('err_str', TType.STRING, 2)
      oprot.writeString(self.err_str)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InterfaceAddressConfig:
  """
  Interface address configuration data structure.
  Equivalent cli example -
  set interfaces ge-1/1/6 unit 0 family inet address 10.10.1.1/24
  set interfaces ge-1/1/6 unit 0 family inet6 address abcd::1/64

  Attributes:
   - port_name
   - ifl_unit
   - family
   - interface_address
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'port_name', None, None, ), # 1
    (2, TType.I32, 'ifl_unit', None, None, ), # 2
    (3, TType.I32, 'family', None, None, ), # 3
    (4, TType.STRING, 'interface_address', None, None, ), # 4
  )

  def __init__(self, port_name=None, ifl_unit=None, family=None, interface_address=None,):
    self.port_name = port_name
    self.ifl_unit = ifl_unit
    self.family = family
    self.interface_address = interface_address

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.port_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ifl_unit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.family = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.interface_address = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InterfaceAddressConfig')
    if self.port_name is not None:
      oprot.writeFieldBegin('port_name', TType.STRING, 1)
      oprot.writeString(self.port_name)
      oprot.writeFieldEnd()
    if self.ifl_unit is not None:
      oprot.writeFieldBegin('ifl_unit', TType.I32, 2)
      oprot.writeI32(self.ifl_unit)
      oprot.writeFieldEnd()
    if self.family is not None:
      oprot.writeFieldBegin('family', TType.I32, 3)
      oprot.writeI32(self.family)
      oprot.writeFieldEnd()
    if self.interface_address is not None:
      oprot.writeFieldBegin('interface_address', TType.STRING, 4)
      oprot.writeString(self.interface_address)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.port_name is None:
      raise TProtocol.TProtocolException(message='Required field port_name is unset!')
    if self.ifl_unit is None:
      raise TProtocol.TProtocolException(message='Required field ifl_unit is unset!')
    if self.family is None:
      raise TProtocol.TProtocolException(message='Required field family is unset!')
    if self.interface_address is None:
      raise TProtocol.TProtocolException(message='Required field interface_address is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
